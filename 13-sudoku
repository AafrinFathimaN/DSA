#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 9

void printGrid(int grid[SIZE][SIZE]) {
    for (int row = 0; row < SIZE; row++) {
        for (int col = 0; col < SIZE; col++) {
            if(col == 3 || col == 6)
                printf(" | ");
            printf("%d ", grid[row][col]);
        }
        if(row == 2 || row == 5) {
            printf("\n");
            for(int i = 0; i < SIZE; i++)
                printf("---");
        }
        printf("\n");
    }
}

int isSafe(int grid[SIZE][SIZE], int row, int col, int num) {
    for (int x = 0; x < SIZE; x++)
        if (grid[row][x] == num || grid[x][col] == num)
            return 0;

    int startRow = row - row % 3, startCol = col - col % 3;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (grid[i + startRow][j + startCol] == num)
                return 0;

    return 1;
}

int solveSudoku(int grid[SIZE][SIZE], int row, int col) {
    if (row == SIZE - 1 && col == SIZE)
        return 1;
    if (col == SIZE) {
        row++;
        col = 0;
    }
    if (grid[row][col] != 0)
        return solveSudoku(grid, row, col + 1);

    for (int num = 1; num <= SIZE; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;
            if (solveSudoku(grid, row, col + 1))
                return 1;
        }
        grid[row][col] = 0;
    }
    return 0;
}

void fillDiagonal(int grid[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i += 3) {
        int num;
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 3; k++) {
                do {
                    num = rand() % 9 + 1;
                } while (!isSafe(grid, i + j, i + k, num));
                grid[i + j][i + k] = num;
            }
        }
    }
}

void removeKDigits(int grid[SIZE][SIZE], int K) {
    int count = K;
    while (count != 0) {
        int cellId = rand() % (SIZE * SIZE);
        int i = (cellId / SIZE);
        int j = cellId % SIZE;
        if (grid[i][j] != 0) {
            count--;
            grid[i][j] = 0;
        }
    }
}

void generateSudoku(int grid[SIZE][SIZE], int K) {
    srand(time(0));
    fillDiagonal(grid);
    solveSudoku(grid, 0, 0);
    removeKDigits(grid, K);
}

int main() {
    int grid[SIZE][SIZE] = {0};
    int K = 20; // Number of cells to remove to create the puzzle

    generateSudoku(grid, K);
    printGrid(grid);

    return 0;
}
